// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Role enum
enum Role {
  teacher
  student
  admin
}

// Define the StudentInfo model
model StudentInfo {
  id              String   @id @default(uuid())
  user_id         String   @unique
  user_info       Json?
  dp              String?
  interests       String[]
  class           Int
  present_address String
  institute       String
  Rating          Rating?
  Class           Class?
  Payment         Payment?
}

// Define the TeacherInfo model
model TeacherInfo {
  id               String     @id @default(uuid())
  user_id          String     @unique
  user_info        Json?
  ratingCum        RatingCum?
  is_student       IsStudent
  job_or_institute String
  experience       Float
  experties        String[]
  hourly_rate      Float
  Rating           Rating?
  Class            Class?
  Payment          Payment?
}

// Define the IsStudent enum
enum IsStudent {
  yes
  no
}

// Define the RatingCum model
model RatingCum {
  id         String      @id @default(uuid())
  teacher    TeacherInfo @relation(fields: [teacher_id], references: [id])
  teacher_id String      @unique
  rating     Float
}

// Define the Experties model
model Experties {
  id   String      @id @default(uuid())
  name String      @unique
  type ExpertyType
}

// Define the ExpertyType enum
enum ExpertyType {
  predefined
  custom
}

// Define the Rating model
model Rating {
  id         String      @id @default(uuid())
  student    StudentInfo @relation(fields: [student_id], references: [id])
  student_id String      @unique
  teacher    TeacherInfo @relation(fields: [teacher_id], references: [id])
  teacher_id String      @unique
  rating     Float
  class      Class       @relation(fields: [classId], references: [id])
  comment    String?
  classId    String
}

// Define the Class model
model Class {
  id         String      @id @default(uuid())
  student    StudentInfo @relation(fields: [student_id], references: [id])
  student_id String      @unique
  teacher    TeacherInfo @relation(fields: [teacher_id], references: [id])
  teacher_id String      @unique
  duration   Float
  status     ClassStatus
  Rating     Rating[]
  Payment    Payment[]
}

// Define the ClassStatus enum
enum ClassStatus {
  accepted
  running
  end
}

// Define the Payment model
model Payment {
  id             String      @id @default(uuid())
  transaction_id String      @unique
  student        StudentInfo @relation(fields: [student_id], references: [id])
  student_id     String      @unique
  teacher        TeacherInfo @relation(fields: [teacher_id], references: [id])
  teacher_id     String      @unique
  class          Class       @relation(fields: [class_id], references: [id])
  class_id       String
  amount         Float
}

// Define the Chat model
model Chat {
  id      Int    @id @default(autoincrement())
  user_id String @unique
  message Json
}
